#!/bin/sh

LC_ALL=C
export LC_ALL

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
sysconfdir=@sysconfdir@

usage (){
    echo -n "\
This program analyses lmdbg-run's or lmdbg-sym's output and
produces information about memory leaks.

usage:
    lmdbg-check [OPTIONS] [files...]
OPTIONS:
    -h --help                  displays this screen
    -V --version               display version
    -c --config <config_file>  sets configuration file
       --system-leaks          remove memory leaks of system function
"
}

version () {
    cat <<EOF
lmdbg-check @LMDBG_VERSION@
EOF
}

while test $# -ne 0; do
    case $1 in
	-h)
	    usage
	    exit 0;;
	--help)
	    usage
	    exit 0;;
	-V)
	    version
	    exit 0;;
	--version)
	    version
	    exit 0;;
        -c|--config)
	    conf_file=$2
	    shift;;
	--system-leaks)
	    system_leaks=1;;
	--)
	    shift
	    break;;
	-*)
	    echo "unknown option '$1'" 1>&2
	    exit 1;;
	*)
	    break;;
    esac
    shift
done

if test -z "$conf_file"; then
    conf_file=$HOME/.lmdbg-check

    if ! test -r "$conf_file"; then
	conf_file=$sysconfdir/lmdbg-check.conf

	if ! test -r "$conf_file"; then
	    conf_file=''
	fi
    fi
fi

remove_system_leaks () {
    @AWK@ -v conf_file="$conf_file" '
    BEGIN {
	while (0 < (ret = getline < conf_file)){
	    sub(/#.*$/, "")

	    if ($1 == "ignore_file"){
		ignore_file [$2] = ""
		continue
	    }
	    if ($1 == "ignore_line"){
		ignore_line [$2] = ""
		continue
	    }
	    if (NF == 0){
		continue
	    }

	    print "invalid command: `" $1 "`" > "/dev/stderr"
	    exit 2
	}

	if (ret < 0){
	    print "reading error from \"" conf_file "\"" > "/dev/stderr"
	    exit 1
	}

	count = 0
	ignore = 0
    }

    {
#	print "count=" count
    }

    function print_traceback (      i) {
	for (i=0; i < count; ++i){
	    print traceback [i]
	}
    }

    NF == 0 || /^[^ ]/ {
	if (!ignore){
	    print_traceback()
#	    print ""
	}

	ignore = 0
	count  = 0

	if (NF == 0)
	    next
    }

    ignore {
	next
    }

    {
	traceback [count++] = $0
    }

    /^ / {
	if ($1 in ignore_line){
	    ignore = 1
	    next
	}

	sub(/:.*$/, "", $1)

	if ($1 in ignore_file){
	    ignore = 1
	    next
	}
    }' "$@"
}

#echo "conf_file='$conf_file'"
if test "_$conf_file" != "_" && ! test -r "$conf_file"; then
    echo "configuration file '$conf_file' is not readable" 1>&2
    exit 1
fi

if test "$system_leaks"; then
    if test "_$conf_file" != "_" && test -r "$conf_file"; then
	remove_system_leaks "$@"
	exit $?
    else
	echo "configuration file is not available" 1>&2
	exit 1
    fi
fi

@AWK@ '
NF > 0 && /^ / {
    calls = calls " " $0
    next
}
NF > 0 {
    if (calls){
	print last "\t" calls
	calls = ""
    }

    last = $0
}
END {
    if (calls){
	print last "\t" calls
	calls = ""
    }
}
' "$@" |
@AWK@ '
BEGIN {
}

$1 == "malloc" {
    h [$6] = $0
}

$1 == "memalign" {
    h [$8] = $0
}

$1 == "free" {
    delete h [$3]
}

$1 == "realloc" {
    if ($3 == "NULL"){
	h [$8] = $0
    }else if ($8 != $3){
	h [$8] = h [$3]
	delete h [$3]
    }
}

END {
    for (addr in h){
	print h [addr]
    }
}' |
@AWK@ '
$1 == "malloc" {
    print $1, $2, $3, $4, $5, $6

    for (i=7; i <= NF; ++i){
	print " " $i
    }
}

$1 == "memalign" {
    print $1, $2, $3, $4, $5, $6, $7, $8

    for (i=9; i <= NF; ++i){
	print " " $i
    }
}

$1 == "free" {
    print "this should not happen" > "/dev/stderr"
    exit 1
}

$1 == "realloc" {
    print $1, $2, $3, $4, $5, $6, $7, $8

    for (i=9; i <= NF; ++i){
	print " " $i
    }
}
#{
#    print ""
#}
'
