.\" Copyright (c) 2010-2012 by Aleksey Cheusov (vle@gmx.net)
.\" Absolutely no warranty.
.\"
.\" ------------------------------------------------------------------
.de VB \" Verbatim Begin
.ft CW
.nf
.ne \\$1
..
.de VE \" Verbatim End
.ft R
.fi
..
.\" ------------------------------------------------------------------
.TH LMDBG-GREP 1 "Sep 2, 2012" "" ""
.SH NAME
lmdbg-grep \- output stacktraces that match the specified condition
.SH SYNOPSIS
.BI lmdbg-grep " [OPTIONS] <awk_expr> [files...]"
.SH DESCRIPTION
.B lmdbg-grep
takes output of
.B lmdbg-stat
or
.B lmdbg-run
as input and outputs stacktraces that match the condition
.IR awk_expr .
The following special variables can be used in
.IR awk_exp
expression :
.RS
.TP
.I bytes
the number of allocated bytes,
.TP
.I allocs
the number of calls of malloc/calloc/memalign/posix_memalign,
.TP
.I max
the maximum number of bytes allocated per malloc/calloc/memalign/posix_memalign
function,
.TP
.I peak
the peak number of allocated bytes,
.TP
.I leaks
the number of allocated but not freed bytes,
.TP
.I address
address returned by memory allocation function,
.TP
.I source
source code filename,
.TP
.I funcname
function name,
.TP
.I addrline
address in the stacktrace.
.RE
The following variables are numeric:
.IR bytes ", " allocs ", " max ", " peak ", " leaks ;
others contain string values.
.SH OPTIONS
.TP
.B "-h"
Display the help message.
.TP
.BI "-V"
Display the lmdbg version.
.TP
.BI "-v"
Invert the sense of matching, select non-matching lines.
.SH EXAMPLE
.VB
$ cat log
stacktrace peak: 120 max: 70 allocs: 3 leaks: 50
 0xbbbe2bc3     lmdbg.c:101     log_stacktrace
 0xbbbe3498     lmdbg.c:456     realloc
 0x8049700      testme.c:902    func1
 0x8048788      testme.c:9      main
 0x80485b4      
 0x8048517      
stacktrace peak: 100 max: 100 allocs: 1
 0xbbbe2bc3     lmdbg.c:101     log_stacktrace
 0xbbbe33bd     lmdbg.c:431     malloc
 0x8049654      testme.c:450    func2
 0x8048757      testme.c:7      main
 0x80485b4      
 0x8048517      
$ lmdbg-grep 'leaks > 0' log 
stacktrace peak: 120 max: 70 allocs: 3 leaks: 50
 0xbbbe2bc3     lmdbg.c:101     log_stacktrace
 0xbbbe3498     lmdbg.c:456     realloc
 0x8049700      testme.c:902    func1
 0x8048788      testme.c:9      main
 0x80485b4      
 0x8048517      
$ lmdbg-grep '!leaks' log    
stacktrace peak: 100 max: 100 allocs: 1
 0xbbbe2bc3     lmdbg.c:101     log_stacktrace
 0xbbbe33bd     lmdbg.c:431     malloc
 0x8049654      testme.c:450    func2
 0x8048757      testme.c:7      main
 0x80485b4      
 0x8048517      
$ lmdbg-grep 'addrline ~ /\tfunc2/' log  
stacktrace peak: 100 max: 100 allocs: 1
 0xbbbe2bc3     lmdbg.c:101     log_stacktrace
 0xbbbe33bd     lmdbg.c:431     malloc
 0x8049654      testme.c:450    func2
 0x8048757      testme.c:7      main
 0x80485b4      
 0x8048517      
$ lmdbg-grep 'allocs > 1000 || peak > 1000000' log   
$
.VE
.SH SEE ALSO
.BR lmdbg(1) ,
.BR lmdbg-run(1) ,
.BR lmdbg-sym(1) ,
.BR lmdbg-stat(1) ,
.BR lmdbg-sort(1) ,
.BR lmdbg-leaks(1) ,
.BR lmdbg-sysleaks(1) ,
.BR lmdbg-strip(1) ,
.BR lmdbg-modules(1)
.SH AUTHOR
Aleksey Cheusov <vle@gmx.net>
