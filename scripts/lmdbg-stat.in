#!/bin/sh

# Copyright (c) 2003-2009 Aleksey Cheusov <vle@gmx.net>
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

. pipestatus

usage () {
    cat <<'EOF'
Given an output of lmdbg-run or other lmdbg-* utilities on input
lmdbg-stat outputs a total and per-stacktrace statistical information
about memory alocations.

usage: lmdbg-stat [OPTIONS] [files...]
OPTIONS:
  -h --help                   display this screen
  -V --version                display version
EOF
}

version (){
cat <<'EOF'
lmdbg-stat @LMDBG_VERSION@
EOF
}

while test $# -ne 0; do
    case $1 in
	-h|--help)
	    usage
	    exit 0;;
	-V|--version)
	    version
	    exit 0;;
	--)
	    shift
	    break;;
	-*)
	    echo "unknown option '$1'" 1>&2
	    exit 1;;
	*)
	    break;;
    esac

    shift
done

sumcounts (){
    @AWK@ '
/^info / {
    print
    next
}

function get_id (st){
    if (st in ids){
	return ids [st]
    }else{
	ids [st] = ++ids_count
	return ids_count
    }
}

/^malloc / {
    id = get_id($7)
    ptr2trace [$6]   = id
    ptr2size  [$6]   = $3
    allocated [id]  += $3
    total_allocated += $3
    ++total_allocs_cnt
    if (allocated [id] > peak_allocated [id])
	peak_allocated [id] = allocated [id]
    if ($3+0 > max_allocated [id])
	max_allocated [id] = $3
    ++allocs_cnt [id]
    next
}

/^calloc / {
    id = get_id($9)
    bytes = $3 * $5
    ptr2trace [$8]   = id
    ptr2size  [$8]   = bytes
    allocated [id]  += bytes
    total_allocated += bytes
    ++total_allocs_cnt
    if (allocated [id] > peak_allocated [id])
	peak_allocated [id] = allocated [id]
    if (bytes > max_allocated [id])
	max_allocated [id] = bytes
    ++allocs_cnt [id]
    next
}

/^(memalign|posix_memalign) / {
    id = get_id($9)
    ptr2trace [$8]   = id
    ptr2size  [$8]   = $5
    allocated [id]  += $5
    total_allocated += $5
    ++total_allocs_cnt
    if (allocated [id] > peak_allocated [id])
	peak_allocated [id] = allocated [id]
    if ($5+0 > max_allocated [id])
	max_allocated [id] = $5
    ++allocs_cnt [id]
    next
}

/^realloc / {
    id = get_id($9)
    allocated [id]  += $5
    total_allocated += $5
    total_allocated            -= ptr2size [$3]
    allocated [ptr2trace [$3]] -= ptr2size [$3]
    delete ptr2size [$3]
    delete ptr2trace [$3]
    ptr2trace [$8]   = id
    ptr2size  [$8]   = $5
    ++total_allocs_cnt
    if (allocated [id] > peak_allocated [id])
	peak_allocated [id] = allocated [id]
    if ($5+0 > max_allocated [id])
	max_allocated [id] = $5
    ++allocs_cnt [id]
    next
}

/^free / {
    total_allocated            -= ptr2size [$3]
    allocated [ptr2trace [$3]] -= ptr2size [$3]
    delete ptr2size [$3]
    delete ptr2trace [$3]
    ++total_free_cnt
    next
}

END {
    print "info stat total_leaks: " total_allocated
    print "info stat total_allocs: " total_allocs_cnt
    print "info stat total_free_cnt: " total_free_cnt

    for (i in ids){
	printf "stacktrace"
	id = get_id(i)
	if ((id in peak_allocated) && peak_allocated [id])
	    printf " peak: %s", peak_allocated [id]
	if (id in max_allocated)
	    printf " max: %s", max_allocated [id]
	if (id in allocs_cnt)
	    printf " allocs: %s", allocs_cnt [id]
	if ((id in allocated) && allocated [id])
	    printf " leaks: %s", allocated [id]
	printf " %s\n", i
    }
}
' "$@"
}

runpipe0 \
    lmdbg-m2s "$@" '|' \
    sumcounts '|' \
    lmdbg-s2m
