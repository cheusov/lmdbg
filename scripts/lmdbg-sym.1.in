.\" Copyright (c) 2008-2011 by Aleksey Cheusov (vle@gmx.net)
.\" Absolutely no warranty.
.\"
.\" ------------------------------------------------------------------
.de VB \" Verbatim Begin
.ft CW
.nf
.ne \\$1
..
.de VE \" Verbatim End
.ft R
.fi
..
.\" ------------------------------------------------------------------
.TH LMDBG-SYM 1 "Nov 26, 2011" "" ""
.SH NAME
lmdbg-sym \- convert lmdbg-run addresses to source code positions.
.SH SYNOPSIS
.BI lmdbg-sym " [OPTIONS] [files...]"
.SH DESCRIPTION
.B lmdbg-sym
lmdbg-sym takes a log file generated by
.B lmdbg-run
or other
.B lmdbg-*
programs
on input and converts addresses to a source code position and funtion
name if it is possible. This is done with a help of external programs,
.BR gdb(1) " or " addr2line(1).
The result may look like the following
.VB

 realloc ( 0xbb901800 , 777 ) --> 0xbb901c00
  0xbbbe58e8
  0xbbbe5a37
  0x8048764     tests/test2.c:10      main
  0x8048584
  0x80484e7

.VE
Here the address 0x8048764 corresponds to the function
.IR main ","
source
file
.I tests/test2.c
and line number
.I 10
in it.  Address, source file and
function name are separated by TAB character.
.SH OPTIONS
.TP
.B "-h"
display help message
.TP
.BI "-V"
display the lmdbg version
.TP
.BI "-g"
use gdb(1) for resolving symbols. This is the default.
.TP
.BI "-a"
use addr2line(1) for resolving symbols.
.TP
.BI "-P" " progname"
path to program. By default it is read from
.IR logfiles .
.TP
.BI "-s" " library:flags"
Library to dlopen(3) and flags separated by the colon symbol.
Possible flags are: RTLD_LAZY, RTLD_NOW and RTLD_GLOBAL
.SH ENVIRONMENT
.TP
.B LMDBG_LIB
Path to LD_PRELOAD'ed liblmdbg dynamic library. It defaults to
@libdir@/liblmdbg.so
.TP
.B LMDBG_GDB
.B gdb(1)
program to run, defaults to @GDB@.
.SH EXAMPLE
.VB
$ cat -n testme.c
     1 #include <stdlib.h>
     2
     3  int main ()
     4  {
     5     int i;
     6     void *p1, *p2;
     7     p1 = malloc (100);
     8     for (i=0; i < 3; ++i){
     9        p2 = realloc (NULL, 10+30*i);
    10     }
    11     free (p1);
    12     free (p2);
    13
    14     return 0;
    15  }
$ cc -O0 -g -o testme testme.c
$ lmdbg-run -T2 -B2 -f 'lmdbg-sym' -o log ./testme
$ cat log
info progname ./testme
malloc ( 100 ) --> 0xbb901080 num: 1
 0x8048789      testme.c:7      main
realloc ( NULL , 10 ) --> 0xbb903040 num: 2
 0x80487bb      testme.c:9      main
realloc ( NULL , 40 ) --> 0xbb905070 num: 3
 0x80487bb      testme.c:9      main
realloc ( NULL , 70 ) --> 0xbb904060 num: 4
 0x80487bb      testme.c:9      main
free ( 0xbb901080 ) num: 5
 0x80487d7      testme.c:12     main
free ( 0xbb904060 ) num: 6
 0x80487e3      testme.c:14     main
$ 
.VE
.SH EXAMPLE
.VB
lmdbg-sym -h
lmdbg-sym -V
lmdbg-run -o _log ./my_app &&
  lmdbg-leaks _log > _log_leaks &&
  lmdbg-sym -a ./my_app _log_leaks > _log_leaks2 &&
  lmdbg-sysleaks -s _log_leaks2 > _log_final
lmdbg-run -p 'lmdbg-leaks | lmdbg-sym -p > _log' ./my_app <args>
lmdbg-sym -g -s /path/to/dll1.so RTLD_NOW -p < _log
.VE
.SH SEE ALSO
.BR lmdbg-run(1) ,
.BR lmdbg-leaks(1) ,
.BR lmdbg-sysleaks(1) ,
.BR lmdbg(1),
.BR lmdbg-stat(1),
.BR lmdbg-sort(1),
.BR gdb(1) ,
.B addr2line(1)
.SH AUTHOR
Aleksey Cheusov <vle@gmx.net>
