#!/bin/sh

# Copyright (c) 2003-2009 Aleksey Cheusov <vle@gmx.net>
# 
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
# 
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

version (){
cat <<EOF
lmdbg-run @LMDBG_VERSION@
EOF
}

usage (){
    cat <<'EOF'
lmdbg is a tiny program for detecting memory leaks in C programs

usage: lmdbg [OPTIONS] <prog> [args...]
OPTIONS:
  -h                display this screen
  -V                display version
  -c <config_file>  configuration file for lmdbg-leaks
  -o <filename>     set a filename for logging
  -v                verbose loggin
  -a                pass -a to lmdbg-sym
  -g                pass -g to lmdbg-sym (default)
EOF
}

lmdbg_sym_opts=''

while getopts hVvo:c:ga f; do
    case $f in
	h)
	    usage
	    exit 0;;
	V)
	    version
	    exit 0;;
	v)
	    verbose=--verbose;;
	o)
	    log_file="$OPTARG";;
        c)
	    conf_opts="-c $OPTARG";;
	g)
	    lmdbg_sym_opts="$lmdbg_sym_opts -g";;
	a)
	    lmdbg_sym_opts="$lmdbg_sym_opts -a";;
	'?')
	    usage 1>&2
	    exit 1;;
    esac
done
shift $(expr $OPTIND - 1)

if test $# = 0; then
    echo "<prog> is missing. Run lmdbg -h for more information" 1>&2
    exit 1
fi

if test "_$log_file" = "_"; then
    echo "log file is not specified. Run lmdbg -h for more information" 1>&2
    exit 1
fi

if test -d /usr/lib/debug; then
    LD_LIBRARY_PATH=/usr/lib/debug:$LD_LIBRARY_PATH
fi

type lmdbg-run   > /dev/null || exit 1
type lmdbg-sym   > /dev/null || exit 2
type lmdbg-leaks > /dev/null || exit 3
type lmdbg-sysleaks > /dev/null || exit 3

pipe="lmdbg-leaks | lmdbg-sym $lmdbg_sym_opts -p | lmdbg-sysleaks $conf_opts -s | grep -v '^info '"

lmdbg-run -p "$pipe" -o "$log_file" "$@"
if test -s "$log_file"; then
    if test "$verbose"; then
	echo "Memory leaks were detected and saved to the file '$log_file'" 1>&2
    fi

    exit 10
else
    rm "$log_file"

    if test $verbose; then
	echo "No memory leaks detected" 1>&2
    fi
fi
